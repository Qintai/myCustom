<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QinOpen</name>
    </assembly>
    <members>
        <member name="M:QinOpen.JwtHelper.IssueJwt(QinOpen.TokenModelJwt)">
            <summary>
            颁发JWT字符串
            </summary>
            <param name="tokenModel"></param>
            <returns></returns>
        </member>
        <member name="M:QinOpen.JwtHelper.SerializeJwt(System.String)">
            <summary>
            解析
            </summary>
            <param name="jwtStr"></param>
            <returns></returns>
        </member>
        <member name="T:QinOpen.TokenModelJwt">
            <summary>
            令牌
            </summary>
        </member>
        <member name="P:QinOpen.TokenModelJwt.Uid">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:QinOpen.TokenModelJwt.Role">
            <summary>
            角色
            </summary>
        </member>
        <member name="P:QinOpen.TokenModelJwt.Work">
            <summary>
            职能
            </summary>
        </member>
        <member name="T:QinOpen.CustomAutofacAop">
            <summary>
            自定义的Autofac的AOP扩展
            </summary>
        </member>
        <member name="T:QinOpen.CustomAutofacModule">
            <summary>
            AutoFac 批量注入
            </summary>
        </member>
        <member name="M:QinOpen.DBInit.DbInitialization(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
             配置数据库的链接
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:QinOpen.JwtAuthorization.Jwt(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加JWT授权，单个角色，单个策略
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:QinOpen.JwtAuthorization.AddCustomAuthorization(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
             自定义的一组授权策略,组名  Permission【Permissions.Name】，组内角色：自定义
            </summary>
            <param name="services"></param>
        </member>
        <member name="T:QinOpen.ServicesInjection">
            <summary>
            读取Json的配置，自定义Json的配置，json文件内容，通过IOptions，映射成实体
            https://www.cnblogs.com/dotnet261010/p/10172961.html 
            https://www.cnblogs.com/CreateMyself/p/6859076.html
            </summary>
        </member>
        <member name="M:QinOpen.ServicesInjection.InjectionBusinessServer(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注入当前程序集需要的 业务信息
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:QinOpen.Controllers.HomeController.getIp">
            <summary>
            拦截路由，后跳转到此
            </summary>
            <returns></returns>
        </member>
        <member name="M:QinOpen.Controllers.HomeController.JsonDemo">
            <summary>
            JsonDemo
            </summary>
            <returns></returns>
        </member>
        <member name="T:QinOpen.Controllers.ProjectUserController">
            <summary>
            用户操作
            </summary>
        </member>
        <member name="M:QinOpen.Controllers.ProjectUserController.Login(System.String,System.String)">
            <summary>
            登陆接口
            </summary>
            <param name="Name">用户名</param>
            <param name="pwd">密码</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:QinOpen.Controllers.ProjectUserController.GetCustom(QinOpen.ViewModel)" -->
        <member name="M:QinOpen.Controllers.ProjectUserController.GetUserList">
            <summary>
            用户列表--C级权限访问
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:QinOpen.Filter.CustomActionAttribute" -->
        <member name="T:QinOpen.Filter.CustomResource">
            <summary>
            资源Filter，可以拦截到
            </summary>
        </member>
        <member name="M:QinOpen.Filter.CustomResource.Clear(Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
            这个方法就是   context.HttpContext.Response.Clear()
            response.HasStarted=true。代表请求，已经发起，无法撤销
            </summary>
            <param name="response"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:QinOpen.Filter.GlobalAction" -->
        <member name="T:QinOpen.Filter.GlobalExceptionsFilter">
            <summary>
            全局异常错误日志
            </summary>
        </member>
        <member name="M:QinOpen.Filter.GlobalExceptionsFilter.WriteLog(System.String,System.Exception)">
            <summary>
            自定义返回格式
            </summary>
            <param name="throwMsg"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="T:QinOpen.Filter.ValidationError">
            <summary>
            验证错误的类型
            </summary>
        </member>
        <member name="T:QinOpen.Middleware.AnalysisResponse">
            <summary>
            解析 Response body 里面的内容
            </summary>
        </member>
        <member name="M:QinOpen.Middleware.AnalysisResponse.ReadBodyAsync(Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
            解析 Response body 里面的内容
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="T:QinOpen.Middleware.ErrorHandlingMiddleware">
            <summary>
            // https://www.cnblogs.com/jomzhang/p/9253647.html
            
            </summary>
        </member>
        <member name="T:QinOpen.MessageModel">
            <summary>
            通用返回信息类
            </summary>
        </member>
        <member name="P:QinOpen.MessageModel.success">
            <summary>
            操作是否成功
            </summary>
        </member>
        <member name="P:QinOpen.MessageModel.msg">
            <summary>
            返回信息
            </summary>
        </member>
        <member name="P:QinOpen.MessageModel.code">
            <summary>
            返回状态码
            </summary>
        </member>
        <member name="P:QinOpen.MessageModel.data">
            <summary>
            返回数据
            </summary>
        </member>
        <member name="T:QinOpen.DynamicRoute">
            <summary>
            NetCore3.0 的自定义路由。和NetCore3.0以下完全不一样，
            用来拦截请求中，以 “.ip”结尾的，拦截路由，处理得到新的路由
            指导博客：https://blog.csdn.net/qq_22949043/article/details/100548137
            </summary>
        </member>
        <member name="M:QinOpen.Startup.ConfigureContainer(Autofac.ContainerBuilder)">
            <summary>
            AutoFac
            </summary>
            <param name="containerBuilder"></param>
        </member>
        <member name="T:Blog.Core.AuthHelper.JwtTokenAuth">
            <summary>
            中间件
            原做为自定义授权中间件
            先做检查 header token的使用
            </summary>
        </member>
        <member name="F:Blog.Core.AuthHelper.JwtTokenAuth._next">
            <summary>
            
            </summary>
        </member>
        <member name="M:Blog.Core.AuthHelper.JwtTokenAuth.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:Blog.Core.AuthHelper.JwtTokenAuth.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.AuthHelper.JwtToken">
            <summary>
            JWTToken生成类
            </summary>
        </member>
        <member name="M:Blog.Core.AuthHelper.JwtToken.BuildJwtToken(System.Security.Claims.Claim[],Blog.Core.AuthHelper.PermissionRequirement)">
            <summary>
            获取基于JWT的Token
            </summary>
            <param name="claims">需要在登陆的时候配置</param>
            <param name="permissionRequirement">在startup中定义的参数</param>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.AuthHelper.PermissionHandler">
            <summary>
            权限授权处理器，
            </summary>
        </member>
        <member name="P:Blog.Core.AuthHelper.PermissionHandler._Schemes">
            <summary>
            验证方案提供对象
            </summary>
        </member>
        <member name="F:Blog.Core.AuthHelper.PermissionHandler._accessor">
            <summary>
            为了获取HttpContext
            </summary>
        </member>
        <member name="M:Blog.Core.AuthHelper.PermissionHandler.#ctor(Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider,Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            构造函数注入
            </summary>
            <param name="schemes"> 验证方案提供对象</param>
            <param name="accessor">上下文</param>
        </member>
        <member name="T:Blog.Core.AuthHelper.PermissionItem">
            <summary>
            用户或角色或其他凭据实体,就像是订单详情一样
            之前的名字是 Permission
            </summary>
        </member>
        <member name="P:Blog.Core.AuthHelper.PermissionItem.Role">
            <summary>
            用户或角色或其他凭据名称
            </summary>
        </member>
        <member name="P:Blog.Core.AuthHelper.PermissionItem.Url">
            <summary>
            请求Url，作用：角色名称于请求地址绑定
            </summary>
        </member>
        <member name="T:Blog.Core.AuthHelper.PermissionRequirement">
            <summary>
            必要参数类，类似一个订单信息
            继承 IAuthorizationRequirement，用于设计自定义权限处理器PermissionHandler
            因为AuthorizationHandler 中的泛型参数 TRequirement 必须继承 IAuthorizationRequirement
            </summary>
        </member>
        <member name="P:Blog.Core.AuthHelper.PermissionRequirement.Permissions">
            <summary>
            用户权限集合，一个订单包含了很多详情，
            同理，一个网站的认证发行中，也有很多权限详情(这里是Role和URL的关系)
            </summary>
        </member>
        <member name="P:Blog.Core.AuthHelper.PermissionRequirement.DeniedAction">
            <summary>
            无权限action
            </summary>
        </member>
        <member name="P:Blog.Core.AuthHelper.PermissionRequirement.ClaimType">
            <summary>
            认证授权类型
            </summary>
        </member>
        <member name="P:Blog.Core.AuthHelper.PermissionRequirement.LoginPath">
            <summary>
            权限验证或者没有凭据的情况，需要请求的路径
            </summary>
        </member>
        <member name="P:Blog.Core.AuthHelper.PermissionRequirement.Issuer">
            <summary>
            发行人
            </summary>
        </member>
        <member name="P:Blog.Core.AuthHelper.PermissionRequirement.Audience">
            <summary>
            订阅人
            </summary>
        </member>
        <member name="P:Blog.Core.AuthHelper.PermissionRequirement.Expiration">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="P:Blog.Core.AuthHelper.PermissionRequirement.SigningCredentials">
            <summary>
            签名验证
            </summary>
        </member>
        <member name="M:Blog.Core.AuthHelper.PermissionRequirement.#ctor(System.String,System.Collections.Generic.List{Blog.Core.AuthHelper.PermissionItem},System.String,System.String,System.String,Microsoft.IdentityModel.Tokens.SigningCredentials,System.TimeSpan)">
            <summary>
            构造
            </summary>
            <param name="deniedAction">拒约请求的url</param>
            <param name="permissions">权限集合</param>
            <param name="claimType">声明类型</param>
            <param name="issuer">发行人</param>
            <param name="audience">订阅人</param>
            <param name="signingCredentials">签名验证实体</param>
            <param name="expiration">过期时间</param>
        </member>
    </members>
</doc>
